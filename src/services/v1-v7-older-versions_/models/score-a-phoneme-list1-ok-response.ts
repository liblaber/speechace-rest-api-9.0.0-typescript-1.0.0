// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  scoreAPhonemeList1OkResponseWordScore,
  scoreAPhonemeList1OkResponseWordScoreRequest,
  scoreAPhonemeList1OkResponseWordScoreResponse,
} from './score-a-phoneme-list1-ok-response-word-score';

/**
 * The shape of the model inside the application code - what the users use
 */
export const scoreAPhonemeList1OkResponse = z.lazy(() => {
  return z.object({
    quotaRemaining: z.number().optional(),
    status: z.string().optional(),
    version: z.string().optional(),
    wordScore: scoreAPhonemeList1OkResponseWordScore.optional(),
  });
});

/**
 *
 * @typedef  {ScoreAPhonemeList1OkResponse} scoreAPhonemeList1OkResponse
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {ScoreAPhonemeList1OkResponseWordScore}
 */
export type ScoreAPhonemeList1OkResponse = z.infer<typeof scoreAPhonemeList1OkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreAPhonemeList1OkResponseResponse = z.lazy(() => {
  return z
    .object({
      quota_remaining: z.number().optional(),
      status: z.string().optional(),
      version: z.string().optional(),
      word_score: scoreAPhonemeList1OkResponseWordScoreResponse.optional(),
    })
    .transform((data) => ({
      quotaRemaining: data['quota_remaining'],
      status: data['status'],
      version: data['version'],
      wordScore: data['word_score'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreAPhonemeList1OkResponseRequest = z.lazy(() => {
  return z
    .object({
      quotaRemaining: z.number().nullish(),
      status: z.string().nullish(),
      version: z.string().nullish(),
      wordScore: scoreAPhonemeList1OkResponseWordScoreRequest.nullish(),
    })
    .transform((data) => ({
      quota_remaining: data['quotaRemaining'],
      status: data['status'],
      version: data['version'],
      word_score: data['wordScore'],
    }));
});
