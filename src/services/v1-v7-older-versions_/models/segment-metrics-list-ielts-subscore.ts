// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const segmentMetricsListIeltsSubscore = z.lazy(() => {
  return z.object({
    coherence: z.number().optional(),
    grammar: z.number().optional(),
    vocab: z.number().optional(),
  });
});

/**
 *
 * @typedef  {SegmentMetricsListIeltsSubscore} segmentMetricsListIeltsSubscore
 * @property {number}
 * @property {number}
 * @property {number}
 */
export type SegmentMetricsListIeltsSubscore = z.infer<typeof segmentMetricsListIeltsSubscore>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const segmentMetricsListIeltsSubscoreResponse = z.lazy(() => {
  return z
    .object({
      coherence: z.number().optional(),
      grammar: z.number().optional(),
      vocab: z.number().optional(),
    })
    .transform((data) => ({
      coherence: data['coherence'],
      grammar: data['grammar'],
      vocab: data['vocab'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const segmentMetricsListIeltsSubscoreRequest = z.lazy(() => {
  return z
    .object({ coherence: z.number().nullish(), grammar: z.number().nullish(), vocab: z.number().nullish() })
    .transform((data) => ({
      coherence: data['coherence'],
      grammar: data['grammar'],
      vocab: data['vocab'],
    }));
});
