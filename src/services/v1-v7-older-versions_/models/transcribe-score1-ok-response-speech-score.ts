// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { speechScoreFluency2, speechScoreFluency2Request, speechScoreFluency2Response } from './speech-score-fluency-2';
import {
  speechScoreRelevance2,
  speechScoreRelevance2Request,
  speechScoreRelevance2Response,
} from './speech-score-relevance-2';
import {
  speechScoreWordScoreList2,
  speechScoreWordScoreList2Request,
  speechScoreWordScoreList2Response,
} from './speech-score-word-score-list-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const transcribeScore1OkResponseSpeechScore = z.lazy(() => {
  return z.object({
    fidelityClass: z.string().optional(),
    fluency: speechScoreFluency2.optional(),
    qualityScore: z.number().optional(),
    relevance: speechScoreRelevance2.optional(),
    transcript: z.string().optional(),
    wordScoreList: z.array(speechScoreWordScoreList2).optional(),
  });
});

/**
 *
 * @typedef  {TranscribeScore1OkResponseSpeechScore} transcribeScore1OkResponseSpeechScore
 * @property {string}
 * @property {SpeechScoreFluency2}
 * @property {number}
 * @property {SpeechScoreRelevance2}
 * @property {string}
 * @property {SpeechScoreWordScoreList2[]}
 */
export type TranscribeScore1OkResponseSpeechScore = z.infer<typeof transcribeScore1OkResponseSpeechScore>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const transcribeScore1OkResponseSpeechScoreResponse = z.lazy(() => {
  return z
    .object({
      fidelity_class: z.string().optional(),
      fluency: speechScoreFluency2Response.optional(),
      quality_score: z.number().optional(),
      relevance: speechScoreRelevance2Response.optional(),
      transcript: z.string().optional(),
      word_score_list: z.array(speechScoreWordScoreList2Response).optional(),
    })
    .transform((data) => ({
      fidelityClass: data['fidelity_class'],
      fluency: data['fluency'],
      qualityScore: data['quality_score'],
      relevance: data['relevance'],
      transcript: data['transcript'],
      wordScoreList: data['word_score_list'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const transcribeScore1OkResponseSpeechScoreRequest = z.lazy(() => {
  return z
    .object({
      fidelityClass: z.string().nullish(),
      fluency: speechScoreFluency2Request.nullish(),
      qualityScore: z.number().nullish(),
      relevance: speechScoreRelevance2Request.nullish(),
      transcript: z.string().nullish(),
      wordScoreList: z.array(speechScoreWordScoreList2Request).nullish(),
    })
    .transform((data) => ({
      fidelity_class: data['fidelityClass'],
      fluency: data['fluency'],
      quality_score: data['qualityScore'],
      relevance: data['relevance'],
      transcript: data['transcript'],
      word_score_list: data['wordScoreList'],
    }));
});
