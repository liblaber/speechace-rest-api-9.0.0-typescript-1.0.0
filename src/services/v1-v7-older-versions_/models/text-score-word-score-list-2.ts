// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  wordScoreListPhoneScoreList3,
  wordScoreListPhoneScoreList3Request,
  wordScoreListPhoneScoreList3Response,
} from './word-score-list-phone-score-list-3';
import {
  wordScoreListSyllableScoreList3,
  wordScoreListSyllableScoreList3Request,
  wordScoreListSyllableScoreList3Response,
} from './word-score-list-syllable-score-list-3';

/**
 * The shape of the model inside the application code - what the users use
 */
export const textScoreWordScoreList2 = z.lazy(() => {
  return z.object({
    phoneScoreList: z.array(wordScoreListPhoneScoreList3).optional(),
    qualityScore: z.number().optional(),
    syllableScoreList: z.array(wordScoreListSyllableScoreList3).optional(),
    word: z.string().optional(),
  });
});

/**
 *
 * @typedef  {TextScoreWordScoreList2} textScoreWordScoreList2
 * @property {WordScoreListPhoneScoreList3[]}
 * @property {number}
 * @property {WordScoreListSyllableScoreList3[]}
 * @property {string}
 */
export type TextScoreWordScoreList2 = z.infer<typeof textScoreWordScoreList2>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const textScoreWordScoreList2Response = z.lazy(() => {
  return z
    .object({
      phone_score_list: z.array(wordScoreListPhoneScoreList3Response).optional(),
      quality_score: z.number().optional(),
      syllable_score_list: z.array(wordScoreListSyllableScoreList3Response).optional(),
      word: z.string().optional(),
    })
    .transform((data) => ({
      phoneScoreList: data['phone_score_list'],
      qualityScore: data['quality_score'],
      syllableScoreList: data['syllable_score_list'],
      word: data['word'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const textScoreWordScoreList2Request = z.lazy(() => {
  return z
    .object({
      phoneScoreList: z.array(wordScoreListPhoneScoreList3Request).nullish(),
      qualityScore: z.number().nullish(),
      syllableScoreList: z.array(wordScoreListSyllableScoreList3Request).nullish(),
      word: z.string().nullish(),
    })
    .transform((data) => ({
      phone_score_list: data['phoneScoreList'],
      quality_score: data['qualityScore'],
      syllable_score_list: data['syllableScoreList'],
      word: data['word'],
    }));
});
