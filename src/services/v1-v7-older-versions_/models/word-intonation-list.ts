// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const wordIntonationList = z.lazy(() => {
  return z.object({
    syllableIntonationList: z.array(z.array(z.string())).optional(),
    word: z.string().optional(),
  });
});

/**
 *
 * @typedef  {WordIntonationList} wordIntonationList
 * @property {string[][]}
 * @property {string}
 */
export type WordIntonationList = z.infer<typeof wordIntonationList>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const wordIntonationListResponse = z.lazy(() => {
  return z
    .object({
      syllable_intonation_list: z.array(z.array(z.string())).optional(),
      word: z.string().optional(),
    })
    .transform((data) => ({
      syllableIntonationList: data['syllable_intonation_list'],
      word: data['word'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const wordIntonationListRequest = z.lazy(() => {
  return z
    .object({ syllableIntonationList: z.array(z.array(z.string())).nullish(), word: z.string().nullish() })
    .transform((data) => ({
      syllable_intonation_list: data['syllableIntonationList'],
      word: data['word'],
    }));
});
