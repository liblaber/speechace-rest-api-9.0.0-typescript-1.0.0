// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const scoreAWordOrSentence1Request = z.lazy(() => {
  return z.object({
    includeFluency: z.string().optional(),
    includeIeltsSubscore: z.string().optional(),
    questionInfo: z.string().optional(),
    text: z.string().optional(),
    userAudioFile: z.instanceof(ArrayBuffer).optional(),
  });
});

/**
 * 
 * @typedef  {ScoreAWordOrSentence1Request} scoreAWordOrSentence1Request   
 * @property {string} - includes fluency scoring for this request. To use this field you must have a Speechace API PRO key.
 * @property {string} - beta: include IELTS subscores for (Vocabulary, Grammar).
 * @property {string} - A unique identifier for the activity or question this user audio is answering.

Structure this field to include as much info as possible to aid in reporting and analytics.

For example: **question_info='u1/q1'** where:
 
* u1: means the question belongs to Unit 1 in your content
* q1: means this is question 1 within the unit

You can add more levels as needed.

Ensure  **no personally identifiable information** is passed in this field.
 * @property {string} - One or more paragraphs of text to score.
 * @property {ArrayBuffer} - file with user audio (wav, mp3, m4a, webm, ogg, aiff)
 */
export type ScoreAWordOrSentence1Request = z.infer<typeof scoreAWordOrSentence1Request>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreAWordOrSentence1RequestResponse = z.lazy(() => {
  return z
    .object({
      include_fluency: z.string().optional(),
      include_ielts_subscore: z.string().optional(),
      question_info: z.string().optional(),
      text: z.string().optional(),
      user_audio_file: z.instanceof(ArrayBuffer).optional(),
    })
    .transform((data) => ({
      includeFluency: data['include_fluency'],
      includeIeltsSubscore: data['include_ielts_subscore'],
      questionInfo: data['question_info'],
      text: data['text'],
      userAudioFile: data['user_audio_file'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreAWordOrSentence1RequestRequest = z.lazy(() => {
  return z
    .object({
      includeFluency: z.string().nullish(),
      includeIeltsSubscore: z.string().nullish(),
      questionInfo: z.string().nullish(),
      text: z.string().nullish(),
      userAudioFile: z.instanceof(ArrayBuffer).nullish(),
    })
    .transform((data) => ({
      include_fluency: data['includeFluency'],
      include_ielts_subscore: data['includeIeltsSubscore'],
      question_info: data['questionInfo'],
      text: data['text'],
      user_audio_file: data['userAudioFile'],
    }));
});
