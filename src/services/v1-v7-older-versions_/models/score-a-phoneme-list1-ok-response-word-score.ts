// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  wordScorePhoneScoreList2,
  wordScorePhoneScoreList2Request,
  wordScorePhoneScoreList2Response,
} from './word-score-phone-score-list-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const scoreAPhonemeList1OkResponseWordScore = z.lazy(() => {
  return z.object({
    phoneScoreList: z.array(wordScorePhoneScoreList2).optional(),
    qualityScore: z.number().optional(),
    word: z.string().optional(),
  });
});

/**
 *
 * @typedef  {ScoreAPhonemeList1OkResponseWordScore} scoreAPhonemeList1OkResponseWordScore
 * @property {WordScorePhoneScoreList2[]}
 * @property {number}
 * @property {string}
 */
export type ScoreAPhonemeList1OkResponseWordScore = z.infer<typeof scoreAPhonemeList1OkResponseWordScore>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreAPhonemeList1OkResponseWordScoreResponse = z.lazy(() => {
  return z
    .object({
      phone_score_list: z.array(wordScorePhoneScoreList2Response).optional(),
      quality_score: z.number().optional(),
      word: z.string().optional(),
    })
    .transform((data) => ({
      phoneScoreList: data['phone_score_list'],
      qualityScore: data['quality_score'],
      word: data['word'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreAPhonemeList1OkResponseWordScoreRequest = z.lazy(() => {
  return z
    .object({
      phoneScoreList: z.array(wordScorePhoneScoreList2Request).nullish(),
      qualityScore: z.number().nullish(),
      word: z.string().nullish(),
    })
    .transform((data) => ({
      phone_score_list: data['phoneScoreList'],
      quality_score: data['qualityScore'],
      word: data['word'],
    }));
});
