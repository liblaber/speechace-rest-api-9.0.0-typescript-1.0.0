// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const scoreAWordOrSentenceRequest = z.lazy(() => {
  return z.object({
    includeFluency: z.string().optional(),
    includeUnknownWords: z.string().optional(),
    noMc: z.string().optional(),
    text: z.string().optional(),
    userAudioFile: z.instanceof(ArrayBuffer).optional(),
  });
});

/**
 *
 * @typedef  {ScoreAWordOrSentenceRequest} scoreAWordOrSentenceRequest
 * @property {string} - includes fluency scoring for this request.
 * @property {string} - Instructs Speechace to automatically infer expected pronunciation for unknown terms such names, places, etc.
 * @property {string} - Indicates no multiple choice type text used.
 * @property {string} - One or more paragraphs of text to score.
 * @property {ArrayBuffer} - file with user audio (wav, mp3, m4a, webm, ogg, aiff)
 */
export type ScoreAWordOrSentenceRequest = z.infer<typeof scoreAWordOrSentenceRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreAWordOrSentenceRequestResponse = z.lazy(() => {
  return z
    .object({
      include_fluency: z.string().optional(),
      include_unknown_words: z.string().optional(),
      no_mc: z.string().optional(),
      text: z.string().optional(),
      user_audio_file: z.instanceof(ArrayBuffer).optional(),
    })
    .transform((data) => ({
      includeFluency: data['include_fluency'],
      includeUnknownWords: data['include_unknown_words'],
      noMc: data['no_mc'],
      text: data['text'],
      userAudioFile: data['user_audio_file'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreAWordOrSentenceRequestRequest = z.lazy(() => {
  return z
    .object({
      includeFluency: z.string().nullish(),
      includeUnknownWords: z.string().nullish(),
      noMc: z.string().nullish(),
      text: z.string().nullish(),
      userAudioFile: z.instanceof(ArrayBuffer).nullish(),
    })
    .transform((data) => ({
      include_fluency: data['includeFluency'],
      include_unknown_words: data['includeUnknownWords'],
      no_mc: data['noMc'],
      text: data['text'],
      user_audio_file: data['userAudioFile'],
    }));
});
