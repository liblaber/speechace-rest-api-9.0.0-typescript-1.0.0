// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const basicConnectives = z.lazy(() => {
  return z.object({
    examples: z.array(z.string()).optional(),
    level: z.string().optional(),
    score: z.number().optional(),
  });
});

/**
 *
 * @typedef  {BasicConnectives} basicConnectives
 * @property {string[]}
 * @property {string}
 * @property {number}
 */
export type BasicConnectives = z.infer<typeof basicConnectives>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const basicConnectivesResponse = z.lazy(() => {
  return z
    .object({
      examples: z.array(z.string()).optional(),
      level: z.string().optional(),
      score: z.number().optional(),
    })
    .transform((data) => ({
      examples: data['examples'],
      level: data['level'],
      score: data['score'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const basicConnectivesRequest = z.lazy(() => {
  return z
    .object({ examples: z.array(z.string()).nullish(), level: z.string().nullish(), score: z.number().nullish() })
    .transform((data) => ({
      examples: data['examples'],
      level: data['level'],
      score: data['score'],
    }));
});
