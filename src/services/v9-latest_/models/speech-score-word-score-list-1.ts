// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  wordScoreListPhoneScoreList2,
  wordScoreListPhoneScoreList2Request,
  wordScoreListPhoneScoreList2Response,
} from './word-score-list-phone-score-list-2';
import {
  wordScoreListSyllableScoreList2,
  wordScoreListSyllableScoreList2Request,
  wordScoreListSyllableScoreList2Response,
} from './word-score-list-syllable-score-list-2';

/**
 * The shape of the model inside the application code - what the users use
 */
export const speechScoreWordScoreList1 = z.lazy(() => {
  return z.object({
    endingPunctuation: z.string().optional(),
    phoneScoreList: z.array(wordScoreListPhoneScoreList2).optional(),
    qualityScore: z.number().optional(),
    syllableScoreList: z.array(wordScoreListSyllableScoreList2).optional(),
    word: z.string().optional(),
  });
});

/**
 *
 * @typedef  {SpeechScoreWordScoreList1} speechScoreWordScoreList1
 * @property {string}
 * @property {WordScoreListPhoneScoreList2[]}
 * @property {number}
 * @property {WordScoreListSyllableScoreList2[]}
 * @property {string}
 */
export type SpeechScoreWordScoreList1 = z.infer<typeof speechScoreWordScoreList1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const speechScoreWordScoreList1Response = z.lazy(() => {
  return z
    .object({
      ending_punctuation: z.string().optional(),
      phone_score_list: z.array(wordScoreListPhoneScoreList2Response).optional(),
      quality_score: z.number().optional(),
      syllable_score_list: z.array(wordScoreListSyllableScoreList2Response).optional(),
      word: z.string().optional(),
    })
    .transform((data) => ({
      endingPunctuation: data['ending_punctuation'],
      phoneScoreList: data['phone_score_list'],
      qualityScore: data['quality_score'],
      syllableScoreList: data['syllable_score_list'],
      word: data['word'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const speechScoreWordScoreList1Request = z.lazy(() => {
  return z
    .object({
      endingPunctuation: z.string().nullish(),
      phoneScoreList: z.array(wordScoreListPhoneScoreList2Request).nullish(),
      qualityScore: z.number().nullish(),
      syllableScoreList: z.array(wordScoreListSyllableScoreList2Request).nullish(),
      word: z.string().nullish(),
    })
    .transform((data) => ({
      ending_punctuation: data['endingPunctuation'],
      phone_score_list: data['phoneScoreList'],
      quality_score: data['qualityScore'],
      syllable_score_list: data['syllableScoreList'],
      word: data['word'],
    }));
});
