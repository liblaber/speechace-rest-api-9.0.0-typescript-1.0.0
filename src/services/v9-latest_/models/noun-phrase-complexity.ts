// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const nounPhraseComplexity = z.lazy(() => {
  return z.object({
    level: z.string().optional(),
    message: z.string().optional(),
    score: z.number().optional(),
  });
});

/**
 *
 * @typedef  {NounPhraseComplexity} nounPhraseComplexity
 * @property {string}
 * @property {string}
 * @property {number}
 */
export type NounPhraseComplexity = z.infer<typeof nounPhraseComplexity>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const nounPhraseComplexityResponse = z.lazy(() => {
  return z
    .object({
      level: z.string().optional(),
      message: z.string().optional(),
      score: z.number().optional(),
    })
    .transform((data) => ({
      level: data['level'],
      message: data['message'],
      score: data['score'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const nounPhraseComplexityRequest = z.lazy(() => {
  return z
    .object({ level: z.string().nullish(), message: z.string().nullish(), score: z.number().nullish() })
    .transform((data) => ({
      level: data['level'],
      message: data['message'],
      score: data['score'],
    }));
});
