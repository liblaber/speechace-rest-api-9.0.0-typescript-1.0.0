// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  speechScoreCefrScore,
  speechScoreCefrScoreRequest,
  speechScoreCefrScoreResponse,
} from './speech-score-cefr-score';
import { coherence, coherenceRequest, coherenceResponse } from './coherence';
import { speechScoreFluency1, speechScoreFluency1Request, speechScoreFluency1Response } from './speech-score-fluency-1';
import { grammar, grammarRequest, grammarResponse } from './grammar';
import {
  speechScoreIeltsScore,
  speechScoreIeltsScoreRequest,
  speechScoreIeltsScoreResponse,
} from './speech-score-ielts-score';
import { speechScorePteScore, speechScorePteScoreRequest, speechScorePteScoreResponse } from './speech-score-pte-score';
import {
  speechScoreRelevance1,
  speechScoreRelevance1Request,
  speechScoreRelevance1Response,
} from './speech-score-relevance-1';
import { scoreIssueList, scoreIssueListRequest, scoreIssueListResponse } from './score-issue-list';
import {
  speechScoreSpeechaceScore,
  speechScoreSpeechaceScoreRequest,
  speechScoreSpeechaceScoreResponse,
} from './speech-score-speechace-score';
import {
  speechScoreToeicScore,
  speechScoreToeicScoreRequest,
  speechScoreToeicScoreResponse,
} from './speech-score-toeic-score';
import { vocab, vocabRequest, vocabResponse } from './vocab';
import {
  speechScoreWordScoreList1,
  speechScoreWordScoreList1Request,
  speechScoreWordScoreList1Response,
} from './speech-score-word-score-list-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const transcribeScoreOkResponseSpeechScore = z.lazy(() => {
  return z.object({
    asrVersion: z.string().optional(),
    cefrScore: speechScoreCefrScore.optional(),
    coherence: coherence.optional(),
    fluency: speechScoreFluency1.optional(),
    grammar: grammar.optional(),
    ieltsScore: speechScoreIeltsScore.optional(),
    pteScore: speechScorePteScore.optional(),
    relevance: speechScoreRelevance1.optional(),
    scoreIssueList: z.array(scoreIssueList).optional(),
    speechaceScore: speechScoreSpeechaceScore.optional(),
    toeicScore: speechScoreToeicScore.optional(),
    transcript: z.string().optional(),
    vocab: vocab.optional(),
    wordScoreList: z.array(speechScoreWordScoreList1).optional(),
  });
});

/**
 *
 * @typedef  {TranscribeScoreOkResponseSpeechScore} transcribeScoreOkResponseSpeechScore
 * @property {string}
 * @property {SpeechScoreCefrScore}
 * @property {Coherence}
 * @property {SpeechScoreFluency1}
 * @property {Grammar}
 * @property {SpeechScoreIeltsScore}
 * @property {SpeechScorePteScore}
 * @property {SpeechScoreRelevance1}
 * @property {ScoreIssueList[]}
 * @property {SpeechScoreSpeechaceScore}
 * @property {SpeechScoreToeicScore}
 * @property {string}
 * @property {Vocab}
 * @property {SpeechScoreWordScoreList1[]}
 */
export type TranscribeScoreOkResponseSpeechScore = z.infer<typeof transcribeScoreOkResponseSpeechScore>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const transcribeScoreOkResponseSpeechScoreResponse = z.lazy(() => {
  return z
    .object({
      asr_version: z.string().optional(),
      cefr_score: speechScoreCefrScoreResponse.optional(),
      coherence: coherenceResponse.optional(),
      fluency: speechScoreFluency1Response.optional(),
      grammar: grammarResponse.optional(),
      ielts_score: speechScoreIeltsScoreResponse.optional(),
      pte_score: speechScorePteScoreResponse.optional(),
      relevance: speechScoreRelevance1Response.optional(),
      score_issue_list: z.array(scoreIssueListResponse).optional(),
      speechace_score: speechScoreSpeechaceScoreResponse.optional(),
      toeic_score: speechScoreToeicScoreResponse.optional(),
      transcript: z.string().optional(),
      vocab: vocabResponse.optional(),
      word_score_list: z.array(speechScoreWordScoreList1Response).optional(),
    })
    .transform((data) => ({
      asrVersion: data['asr_version'],
      cefrScore: data['cefr_score'],
      coherence: data['coherence'],
      fluency: data['fluency'],
      grammar: data['grammar'],
      ieltsScore: data['ielts_score'],
      pteScore: data['pte_score'],
      relevance: data['relevance'],
      scoreIssueList: data['score_issue_list'],
      speechaceScore: data['speechace_score'],
      toeicScore: data['toeic_score'],
      transcript: data['transcript'],
      vocab: data['vocab'],
      wordScoreList: data['word_score_list'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const transcribeScoreOkResponseSpeechScoreRequest = z.lazy(() => {
  return z
    .object({
      asrVersion: z.string().nullish(),
      cefrScore: speechScoreCefrScoreRequest.nullish(),
      coherence: coherenceRequest.nullish(),
      fluency: speechScoreFluency1Request.nullish(),
      grammar: grammarRequest.nullish(),
      ieltsScore: speechScoreIeltsScoreRequest.nullish(),
      pteScore: speechScorePteScoreRequest.nullish(),
      relevance: speechScoreRelevance1Request.nullish(),
      scoreIssueList: z.array(scoreIssueListRequest).nullish(),
      speechaceScore: speechScoreSpeechaceScoreRequest.nullish(),
      toeicScore: speechScoreToeicScoreRequest.nullish(),
      transcript: z.string().nullish(),
      vocab: vocabRequest.nullish(),
      wordScoreList: z.array(speechScoreWordScoreList1Request).nullish(),
    })
    .transform((data) => ({
      asr_version: data['asrVersion'],
      cefr_score: data['cefrScore'],
      coherence: data['coherence'],
      fluency: data['fluency'],
      grammar: data['grammar'],
      ielts_score: data['ieltsScore'],
      pte_score: data['pteScore'],
      relevance: data['relevance'],
      score_issue_list: data['scoreIssueList'],
      speechace_score: data['speechaceScore'],
      toeic_score: data['toeicScore'],
      transcript: data['transcript'],
      vocab: data['vocab'],
      word_score_list: data['wordScoreList'],
    }));
});
