// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const speechScoreCefrScore = z.lazy(() => {
  return z.object({
    coherence: z.string().optional(),
    fluency: z.string().optional(),
    grammar: z.string().optional(),
    overall: z.string().optional(),
    pronunciation: z.string().optional(),
    vocab: z.string().optional(),
  });
});

/**
 *
 * @typedef  {SpeechScoreCefrScore} speechScoreCefrScore
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type SpeechScoreCefrScore = z.infer<typeof speechScoreCefrScore>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const speechScoreCefrScoreResponse = z.lazy(() => {
  return z
    .object({
      coherence: z.string().optional(),
      fluency: z.string().optional(),
      grammar: z.string().optional(),
      overall: z.string().optional(),
      pronunciation: z.string().optional(),
      vocab: z.string().optional(),
    })
    .transform((data) => ({
      coherence: data['coherence'],
      fluency: data['fluency'],
      grammar: data['grammar'],
      overall: data['overall'],
      pronunciation: data['pronunciation'],
      vocab: data['vocab'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const speechScoreCefrScoreRequest = z.lazy(() => {
  return z
    .object({
      coherence: z.string().nullish(),
      fluency: z.string().nullish(),
      grammar: z.string().nullish(),
      overall: z.string().nullish(),
      pronunciation: z.string().nullish(),
      vocab: z.string().nullish(),
    })
    .transform((data) => ({
      coherence: data['coherence'],
      fluency: data['fluency'],
      grammar: data['grammar'],
      overall: data['overall'],
      pronunciation: data['pronunciation'],
      vocab: data['vocab'],
    }));
});
