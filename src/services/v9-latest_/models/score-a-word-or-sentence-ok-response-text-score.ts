// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { textScoreCefrScore, textScoreCefrScoreRequest, textScoreCefrScoreResponse } from './text-score-cefr-score';
import { textScoreFluency1, textScoreFluency1Request, textScoreFluency1Response } from './text-score-fluency-1';
import { textScoreIeltsScore, textScoreIeltsScoreRequest, textScoreIeltsScoreResponse } from './text-score-ielts-score';
import { textScorePteScore, textScorePteScoreRequest, textScorePteScoreResponse } from './text-score-pte-score';
import {
  textScoreSpeechaceScore,
  textScoreSpeechaceScoreRequest,
  textScoreSpeechaceScoreResponse,
} from './text-score-speechace-score';
import { textScoreToeicScore, textScoreToeicScoreRequest, textScoreToeicScoreResponse } from './text-score-toeic-score';
import {
  textScoreWordScoreList1,
  textScoreWordScoreList1Request,
  textScoreWordScoreList1Response,
} from './text-score-word-score-list-1';

/**
 * The shape of the model inside the application code - what the users use
 */
export const scoreAWordOrSentenceOkResponseTextScore = z.lazy(() => {
  return z.object({
    cefrScore: textScoreCefrScore.optional(),
    fluency: textScoreFluency1.optional(),
    ieltsScore: textScoreIeltsScore.optional(),
    pteScore: textScorePteScore.optional(),
    speechaceScore: textScoreSpeechaceScore.optional(),
    text: z.string().optional(),
    toeicScore: textScoreToeicScore.optional(),
    wordScoreList: z.array(textScoreWordScoreList1).optional(),
  });
});

/**
 *
 * @typedef  {ScoreAWordOrSentenceOkResponseTextScore} scoreAWordOrSentenceOkResponseTextScore
 * @property {TextScoreCefrScore}
 * @property {TextScoreFluency1}
 * @property {TextScoreIeltsScore}
 * @property {TextScorePteScore}
 * @property {TextScoreSpeechaceScore}
 * @property {string}
 * @property {TextScoreToeicScore}
 * @property {TextScoreWordScoreList1[]}
 */
export type ScoreAWordOrSentenceOkResponseTextScore = z.infer<typeof scoreAWordOrSentenceOkResponseTextScore>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreAWordOrSentenceOkResponseTextScoreResponse = z.lazy(() => {
  return z
    .object({
      cefr_score: textScoreCefrScoreResponse.optional(),
      fluency: textScoreFluency1Response.optional(),
      ielts_score: textScoreIeltsScoreResponse.optional(),
      pte_score: textScorePteScoreResponse.optional(),
      speechace_score: textScoreSpeechaceScoreResponse.optional(),
      text: z.string().optional(),
      toeic_score: textScoreToeicScoreResponse.optional(),
      word_score_list: z.array(textScoreWordScoreList1Response).optional(),
    })
    .transform((data) => ({
      cefrScore: data['cefr_score'],
      fluency: data['fluency'],
      ieltsScore: data['ielts_score'],
      pteScore: data['pte_score'],
      speechaceScore: data['speechace_score'],
      text: data['text'],
      toeicScore: data['toeic_score'],
      wordScoreList: data['word_score_list'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreAWordOrSentenceOkResponseTextScoreRequest = z.lazy(() => {
  return z
    .object({
      cefrScore: textScoreCefrScoreRequest.nullish(),
      fluency: textScoreFluency1Request.nullish(),
      ieltsScore: textScoreIeltsScoreRequest.nullish(),
      pteScore: textScorePteScoreRequest.nullish(),
      speechaceScore: textScoreSpeechaceScoreRequest.nullish(),
      text: z.string().nullish(),
      toeicScore: textScoreToeicScoreRequest.nullish(),
      wordScoreList: z.array(textScoreWordScoreList1Request).nullish(),
    })
    .transform((data) => ({
      cefr_score: data['cefrScore'],
      fluency: data['fluency'],
      ielts_score: data['ieltsScore'],
      pte_score: data['pteScore'],
      speechace_score: data['speechaceScore'],
      text: data['text'],
      toeic_score: data['toeicScore'],
      word_score_list: data['wordScoreList'],
    }));
});
