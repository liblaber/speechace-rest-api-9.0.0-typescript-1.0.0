// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  coherenceOverallMetrics,
  coherenceOverallMetricsRequest,
  coherenceOverallMetricsResponse,
} from './coherence-overall-metrics';

/**
 * The shape of the model inside the application code - what the users use
 */
export const coherence = z.lazy(() => {
  return z.object({
    overallMetrics: coherenceOverallMetrics.optional(),
  });
});

/**
 *
 * @typedef  {Coherence} coherence
 * @property {CoherenceOverallMetrics}
 */
export type Coherence = z.infer<typeof coherence>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const coherenceResponse = z.lazy(() => {
  return z
    .object({
      overall_metrics: coherenceOverallMetricsResponse.optional(),
    })
    .transform((data) => ({
      overallMetrics: data['overall_metrics'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const coherenceRequest = z.lazy(() => {
  return z.object({ overallMetrics: coherenceOverallMetricsRequest.nullish() }).transform((data) => ({
    overall_metrics: data['overallMetrics'],
  }));
});
