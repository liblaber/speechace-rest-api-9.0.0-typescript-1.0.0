// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { errors, errorsRequest, errorsResponse } from './errors';
import {
  grammarOverallMetrics,
  grammarOverallMetricsRequest,
  grammarOverallMetricsResponse,
} from './grammar-overall-metrics';

/**
 * The shape of the model inside the application code - what the users use
 */
export const grammar = z.lazy(() => {
  return z.object({
    errors: z.array(errors).optional(),
    overallMetrics: grammarOverallMetrics.optional(),
  });
});

/**
 *
 * @typedef  {Grammar} grammar
 * @property {Errors[]}
 * @property {GrammarOverallMetrics}
 */
export type Grammar = z.infer<typeof grammar>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const grammarResponse = z.lazy(() => {
  return z
    .object({
      errors: z.array(errorsResponse).optional(),
      overall_metrics: grammarOverallMetricsResponse.optional(),
    })
    .transform((data) => ({
      errors: data['errors'],
      overallMetrics: data['overall_metrics'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const grammarRequest = z.lazy(() => {
  return z
    .object({ errors: z.array(errorsRequest).nullish(), overallMetrics: grammarOverallMetricsRequest.nullish() })
    .transform((data) => ({
      errors: data['errors'],
      overall_metrics: data['overallMetrics'],
    }));
});
