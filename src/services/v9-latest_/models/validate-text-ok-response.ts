// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const validateTextOkResponse = z.lazy(() => {
  return z.object({
    detailMessage: z.string().optional(),
    quotaRemaining: z.number().optional(),
    shortMessage: z.string().optional(),
    status: z.string().optional(),
  });
});

/**
 *
 * @typedef  {ValidateTextOkResponse} validateTextOkResponse
 * @property {string}
 * @property {number}
 * @property {string}
 * @property {string}
 */
export type ValidateTextOkResponse = z.infer<typeof validateTextOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const validateTextOkResponseResponse = z.lazy(() => {
  return z
    .object({
      detail_message: z.string().optional(),
      quota_remaining: z.number().optional(),
      short_message: z.string().optional(),
      status: z.string().optional(),
    })
    .transform((data) => ({
      detailMessage: data['detail_message'],
      quotaRemaining: data['quota_remaining'],
      shortMessage: data['short_message'],
      status: data['status'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const validateTextOkResponseRequest = z.lazy(() => {
  return z
    .object({
      detailMessage: z.string().nullish(),
      quotaRemaining: z.number().nullish(),
      shortMessage: z.string().nullish(),
      status: z.string().nullish(),
    })
    .transform((data) => ({
      detail_message: data['detailMessage'],
      quota_remaining: data['quotaRemaining'],
      short_message: data['shortMessage'],
      status: data['status'],
    }));
});
