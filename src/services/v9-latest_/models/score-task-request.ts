// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const scoreTaskRequest = z.lazy(() => {
  return z.object({
    includeSpeechScore: z.string().optional(),
    taskQuestion: z.string().optional(),
    userAudioText: z.string().optional(),
  });
});

/**
 * 
 * @typedef  {ScoreTaskRequest} scoreTaskRequest   
 * @property {string} - Default: 1
Whether to include scoring other aspects of the speech: Pronunciation, Fluency, Grammar, Vocab, Coherence.
Set to 0 if you only want to receive the task score.


 * @property {string} - The question presented to the user.
 * @property {string} 
 */
export type ScoreTaskRequest = z.infer<typeof scoreTaskRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreTaskRequestResponse = z.lazy(() => {
  return z
    .object({
      include_speech_score: z.string().optional(),
      task_question: z.string().optional(),
      user_audio_text: z.string().optional(),
    })
    .transform((data) => ({
      includeSpeechScore: data['include_speech_score'],
      taskQuestion: data['task_question'],
      userAudioText: data['user_audio_text'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const scoreTaskRequestRequest = z.lazy(() => {
  return z
    .object({
      includeSpeechScore: z.string().nullish(),
      taskQuestion: z.string().nullish(),
      userAudioText: z.string().nullish(),
    })
    .transform((data) => ({
      include_speech_score: data['includeSpeechScore'],
      task_question: data['taskQuestion'],
      user_audio_text: data['userAudioText'],
    }));
});
