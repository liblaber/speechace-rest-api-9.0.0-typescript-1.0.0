// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  adverbModifierVariation,
  adverbModifierVariationRequest,
  adverbModifierVariationResponse,
} from './adverb-modifier-variation';
import {
  nounPhraseComplexity,
  nounPhraseComplexityRequest,
  nounPhraseComplexityResponse,
} from './noun-phrase-complexity';
import { nounPhraseVariation, nounPhraseVariationRequest, nounPhraseVariationResponse } from './noun-phrase-variation';
import {
  verbConstructionVariation,
  verbConstructionVariationRequest,
  verbConstructionVariationResponse,
} from './verb-construction-variation';

/**
 * The shape of the model inside the application code - what the users use
 */
export const grammaticalRange = z.lazy(() => {
  return z.object({
    adverbModifierVariation: adverbModifierVariation.optional(),
    level: z.string().optional(),
    message: z.string().optional(),
    nounPhraseComplexity: nounPhraseComplexity.optional(),
    nounPhraseVariation: nounPhraseVariation.optional(),
    score: z.number().optional(),
    verbConstructionVariation: verbConstructionVariation.optional(),
  });
});

/**
 *
 * @typedef  {GrammaticalRange} grammaticalRange
 * @property {AdverbModifierVariation}
 * @property {string}
 * @property {string}
 * @property {NounPhraseComplexity}
 * @property {NounPhraseVariation}
 * @property {number}
 * @property {VerbConstructionVariation}
 */
export type GrammaticalRange = z.infer<typeof grammaticalRange>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const grammaticalRangeResponse = z.lazy(() => {
  return z
    .object({
      adverb_modifier_variation: adverbModifierVariationResponse.optional(),
      level: z.string().optional(),
      message: z.string().optional(),
      noun_phrase_complexity: nounPhraseComplexityResponse.optional(),
      noun_phrase_variation: nounPhraseVariationResponse.optional(),
      score: z.number().optional(),
      verb_construction_variation: verbConstructionVariationResponse.optional(),
    })
    .transform((data) => ({
      adverbModifierVariation: data['adverb_modifier_variation'],
      level: data['level'],
      message: data['message'],
      nounPhraseComplexity: data['noun_phrase_complexity'],
      nounPhraseVariation: data['noun_phrase_variation'],
      score: data['score'],
      verbConstructionVariation: data['verb_construction_variation'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const grammaticalRangeRequest = z.lazy(() => {
  return z
    .object({
      adverbModifierVariation: adverbModifierVariationRequest.nullish(),
      level: z.string().nullish(),
      message: z.string().nullish(),
      nounPhraseComplexity: nounPhraseComplexityRequest.nullish(),
      nounPhraseVariation: nounPhraseVariationRequest.nullish(),
      score: z.number().nullish(),
      verbConstructionVariation: verbConstructionVariationRequest.nullish(),
    })
    .transform((data) => ({
      adverb_modifier_variation: data['adverbModifierVariation'],
      level: data['level'],
      message: data['message'],
      noun_phrase_complexity: data['nounPhraseComplexity'],
      noun_phrase_variation: data['nounPhraseVariation'],
      score: data['score'],
      verb_construction_variation: data['verbConstructionVariation'],
    }));
});
