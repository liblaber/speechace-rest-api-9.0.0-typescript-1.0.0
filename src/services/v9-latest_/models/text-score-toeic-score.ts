// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const textScoreToeicScore = z.lazy(() => {
  return z.object({
    pronunciation: z.number().optional(),
  });
});

/**
 *
 * @typedef  {TextScoreToeicScore} textScoreToeicScore
 * @property {number}
 */
export type TextScoreToeicScore = z.infer<typeof textScoreToeicScore>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const textScoreToeicScoreResponse = z.lazy(() => {
  return z
    .object({
      pronunciation: z.number().optional(),
    })
    .transform((data) => ({
      pronunciation: data['pronunciation'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const textScoreToeicScoreRequest = z.lazy(() => {
  return z.object({ pronunciation: z.number().nullish() }).transform((data) => ({
    pronunciation: data['pronunciation'],
  }));
});
