// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { academicLanguageUse, academicLanguageUseRequest, academicLanguageUseResponse } from './academic-language-use';
import {
  collocationCommonality,
  collocationCommonalityRequest,
  collocationCommonalityResponse,
} from './collocation-commonality';
import { idiomaticity, idiomaticityRequest, idiomaticityResponse } from './idiomaticity';
import {
  overallMetricsLexicalDiversity2,
  overallMetricsLexicalDiversity2Request,
  overallMetricsLexicalDiversity2Response,
} from './overall-metrics-lexical-diversity-2';
import { wordSophistication, wordSophisticationRequest, wordSophisticationResponse } from './word-sophistication';
import { wordSpecificity, wordSpecificityRequest, wordSpecificityResponse } from './word-specificity';

/**
 * The shape of the model inside the application code - what the users use
 */
export const vocabOverallMetrics = z.lazy(() => {
  return z.object({
    academicLanguageUse: academicLanguageUse.optional(),
    collocationCommonality: collocationCommonality.optional(),
    idiomaticity: idiomaticity.optional(),
    lexicalDiversity: overallMetricsLexicalDiversity2.optional(),
    wordSophistication: wordSophistication.optional(),
    wordSpecificity: wordSpecificity.optional(),
  });
});

/**
 *
 * @typedef  {VocabOverallMetrics} vocabOverallMetrics
 * @property {AcademicLanguageUse}
 * @property {CollocationCommonality}
 * @property {Idiomaticity}
 * @property {OverallMetricsLexicalDiversity2}
 * @property {WordSophistication}
 * @property {WordSpecificity}
 */
export type VocabOverallMetrics = z.infer<typeof vocabOverallMetrics>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const vocabOverallMetricsResponse = z.lazy(() => {
  return z
    .object({
      academic_language_use: academicLanguageUseResponse.optional(),
      collocation_commonality: collocationCommonalityResponse.optional(),
      idiomaticity: idiomaticityResponse.optional(),
      lexical_diversity: overallMetricsLexicalDiversity2Response.optional(),
      word_sophistication: wordSophisticationResponse.optional(),
      word_specificity: wordSpecificityResponse.optional(),
    })
    .transform((data) => ({
      academicLanguageUse: data['academic_language_use'],
      collocationCommonality: data['collocation_commonality'],
      idiomaticity: data['idiomaticity'],
      lexicalDiversity: data['lexical_diversity'],
      wordSophistication: data['word_sophistication'],
      wordSpecificity: data['word_specificity'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const vocabOverallMetricsRequest = z.lazy(() => {
  return z
    .object({
      academicLanguageUse: academicLanguageUseRequest.nullish(),
      collocationCommonality: collocationCommonalityRequest.nullish(),
      idiomaticity: idiomaticityRequest.nullish(),
      lexicalDiversity: overallMetricsLexicalDiversity2Request.nullish(),
      wordSophistication: wordSophisticationRequest.nullish(),
      wordSpecificity: wordSpecificityRequest.nullish(),
    })
    .transform((data) => ({
      academic_language_use: data['academicLanguageUse'],
      collocation_commonality: data['collocationCommonality'],
      idiomaticity: data['idiomaticity'],
      lexical_diversity: data['lexicalDiversity'],
      word_sophistication: data['wordSophistication'],
      word_specificity: data['wordSpecificity'],
    }));
});
