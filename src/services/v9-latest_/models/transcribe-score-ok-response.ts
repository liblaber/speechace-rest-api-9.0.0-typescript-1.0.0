// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  transcribeScoreOkResponseSpeechScore,
  transcribeScoreOkResponseSpeechScoreRequest,
  transcribeScoreOkResponseSpeechScoreResponse,
} from './transcribe-score-ok-response-speech-score';

/**
 * The shape of the model inside the application code - what the users use
 */
export const transcribeScoreOkResponse = z.lazy(() => {
  return z.object({
    quotaRemaining: z.number().optional(),
    speechScore: transcribeScoreOkResponseSpeechScore.optional(),
    status: z.string().optional(),
    version: z.string().optional(),
  });
});

/**
 *
 * @typedef  {TranscribeScoreOkResponse} transcribeScoreOkResponse
 * @property {number}
 * @property {TranscribeScoreOkResponseSpeechScore}
 * @property {string}
 * @property {string}
 */
export type TranscribeScoreOkResponse = z.infer<typeof transcribeScoreOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const transcribeScoreOkResponseResponse = z.lazy(() => {
  return z
    .object({
      quota_remaining: z.number().optional(),
      speech_score: transcribeScoreOkResponseSpeechScoreResponse.optional(),
      status: z.string().optional(),
      version: z.string().optional(),
    })
    .transform((data) => ({
      quotaRemaining: data['quota_remaining'],
      speechScore: data['speech_score'],
      status: data['status'],
      version: data['version'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const transcribeScoreOkResponseRequest = z.lazy(() => {
  return z
    .object({
      quotaRemaining: z.number().nullish(),
      speechScore: transcribeScoreOkResponseSpeechScoreRequest.nullish(),
      status: z.string().nullish(),
      version: z.string().nullish(),
    })
    .transform((data) => ({
      quota_remaining: data['quotaRemaining'],
      speech_score: data['speechScore'],
      status: data['status'],
      version: data['version'],
    }));
});
